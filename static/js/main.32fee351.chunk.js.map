{"version":3,"sources":["components/SeaSurfaceWave.tsx","components/SeaSurfaceWaterSpeed.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SeaSurfaceWave","props","useEffect","draw","eraseDrawing","isNumber","value","isNaN","Number","toString","d3","selectChild","remove","width","left","right","height","top","bottom","svg","append","attr","d","res","date","datetime","sea_surface_wave_significant_height","air_temperature_at_2m_above_ground_level","wind_from_direction_at_10m_above_ground_level","wind_speed_at_10m_above_ground_level","then","data","x","domain","range","call","y","datum","fill","curve","y0","y1","className","SeaSurfaceWaterSpeed","buildJSON","a","rtnArray","axios","get","response","Object","keys","forEach","val","body","sea_surface_wave_from_direction_at_variance_spectral_density_maximum","surface_sea_water_speed","sea_surface_wave_maximum_height","record","Date","push","sort","recordA","recordB","console","log","map","toISOString","key","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.32fee351.chunk.js","sourcesContent":["import React, { FC, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport \"./SeaSurfaceWave.scss\";\n\ninterface ISeaSurfaceWaveProps {\n    width: number,\n    left: number,\n    right: number,\n    height: number,\n    top: number,\n    bottom: number,\n    fill: string\n}\n\ninterface CSVData {\n    datetime: string,\n    sea_surface_wave_significant_height: string | number,\n    air_temperature_at_2m_above_ground_level: number,\n    wind_from_direction_at_10m_above_ground_level: number,\n    wind_speed_at_10m_above_ground_level: number\n}\n\nconst SeaSurfaceWave: FC<ISeaSurfaceWaveProps> = (props: ISeaSurfaceWaveProps) => {\n\n\n    useEffect(() => {\n\n        draw();\n\n        return function cleanup() {\n            eraseDrawing();\n        };\n\n    })\n\n    const isNumber = (value: string | number): boolean => {\n        return ((value != null) &&\n            (value !== '') &&\n            !isNaN(Number(value.toString())));\n    };\n\n    const eraseDrawing = () => {\n        d3\n            .select('.seaSurfaceWave')\n            .selectChild('svg')\n            .remove()\n    }\n\n\n    const draw = () => {\n\n        const width = props.width - props.left - props.right\n        const height = props.height - props.top - props.bottom\n\n        const svg = d3\n            .select('.seaSurfaceWave')\n            .append('svg')\n            .attr('width', width + props.left + props.right)\n            .attr('height', height + props.top + props.bottom)\n            .append('g')\n            .attr('transform', `translate(${props.left},${props.top})`)\n\n        d3.csv('./data.csv', (d) => {\n            const res = (d as unknown) as CSVData\n\n            const date = d3.timeParse(\"%Y-%m-%dT%H:%M:%SZ\")(res.datetime)\n            let sea_surface_wave_significant_height\n\n            if (isNumber(res.sea_surface_wave_significant_height)) {\n                sea_surface_wave_significant_height = Number(res.sea_surface_wave_significant_height)\n\n            } else {\n                sea_surface_wave_significant_height = 0\n            }\n            const air_temperature_at_2m_above_ground_level = Number(res.air_temperature_at_2m_above_ground_level)\n            const wind_from_direction_at_10m_above_ground_level = Number(res.wind_from_direction_at_10m_above_ground_level)\n            const wind_speed_at_10m_above_ground_level = Number(res.wind_speed_at_10m_above_ground_level)\n            return {\n                date,\n                sea_surface_wave_significant_height,\n                air_temperature_at_2m_above_ground_level,\n                wind_from_direction_at_10m_above_ground_level,\n                wind_speed_at_10m_above_ground_level\n            }\n\n        }).then((data) => {\n            const x = d3\n                .scaleTime()\n                .domain(\n                    d3.extent(data, (d) => {\n                        return d.date\n                    }) as [Date, Date]\n                )\n                .range([0, width])\n\n            svg.append('g').attr('transform', `translate(0, ${height})`).call(d3.axisBottom(x))\n\n            const y = d3\n                .scaleLinear()\n                .domain([\n                    0,\n                    d3.max(data, (d) => {\n                        if (isNumber(d.sea_surface_wave_significant_height)) {\n                            return +d.sea_surface_wave_significant_height\n                        } else {\n                            return 0\n                        }\n                    }),\n                ] as number[])\n                .range([height, 0])\n            svg.append('g').call(d3.axisLeft(y))\n            svg\n                .append('path')\n                .datum(data)\n                .attr('fill', props.fill)\n                .attr('stroke', 'white')\n                .attr('stroke-width', 1.6)\n                .attr(\n                    'd',\n                    // @ts-ignore\n                    d3.area()\n                        .curve(d3.curveLinear)\n                        .x((d) => {\n                            return x(((d as unknown) as { date: number }).date)\n                        })\n                        .y0(y(0))\n                        .y1((d) => {\n                            return y(((d as unknown) as { sea_surface_wave_significant_height: number }).sea_surface_wave_significant_height)\n                        })\n                )\n        })\n    }\n    return <div className=\"seaSurfaceWave\" />\n};\n\nSeaSurfaceWave.propTypes = {\n};\n\nexport default SeaSurfaceWave;","import React, { FC, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport \"./SeaSurfaceWaterSpeed.scss\";\nimport axios from 'axios';\n\ninterface ISeaSurfaceWaterSpeedProps {\n    width: number,\n    left: number,\n    right: number,\n    height: number,\n    top: number,\n    bottom: number,\n    fill: string\n}\ninterface JSONBody {\n    sea_surface_wave_from_direction_at_variance_spectral_density_maximum?: number,\n    surface_sea_water_speed?: number,\n    sea_surface_wave_maximum_height?: number,\n\n}\n\ninterface ISeaSurfaceWaterSpeed {\n    datetime: Date,\n    sea_surface_wave_from_direction_at_variance_spectral_density_maximum: number,\n    surface_sea_water_speed: number,\n    sea_surface_wave_maximum_height: number,\n}\n\nconst SeaSurfaceWaterSpeed: FC<ISeaSurfaceWaterSpeedProps> = (props: ISeaSurfaceWaterSpeedProps) => {\n\n\n    const def_val = 0;\n\n\n\n    const buildJSON = async () => {\n        const rtnArray: ISeaSurfaceWaterSpeed[] = [];\n\n        const response = await axios.get(\"./data.json\");\n\n        Object.keys(response.data).forEach(val => {\n            const datetime: string = val;\n            const body: JSONBody = response.data[val];\n            const sea_surface_wave_from_direction_at_variance_spectral_density_maximum = body.sea_surface_wave_from_direction_at_variance_spectral_density_maximum || def_val;\n            const surface_sea_water_speed = body.surface_sea_water_speed || def_val;\n            const sea_surface_wave_maximum_height = body.sea_surface_wave_maximum_height || def_val;\n            const record = { datetime: d3.timeParse(\"%Y-%m-%dT%H:%M:%SZ\")(datetime) || new Date(0), sea_surface_wave_from_direction_at_variance_spectral_density_maximum: sea_surface_wave_from_direction_at_variance_spectral_density_maximum, surface_sea_water_speed: surface_sea_water_speed, sea_surface_wave_maximum_height: sea_surface_wave_maximum_height };\n\n            rtnArray.push(record);\n\n        });\n        rtnArray.sort((recordA, recordB) => +new Date(recordA.datetime) - +new Date(recordB.datetime));\n\n        return rtnArray;\n    }\n\n\n    useEffect(() => {\n        draw();\n        return function cleanup() {\n            eraseDrawing();\n        };\n\n    })\n\n    const eraseDrawing = () => {\n        d3\n            .select('.seaSurfaceWaterSpeed')\n            .selectChild('svg')\n            .remove()\n    }\n\n\n    const draw = async () => {\n\n        console.log(\"waterspeed draw!\");\n\n\n        const data = await buildJSON();\n\n        data.map((d) => {\n            console.log(d.datetime.toISOString)\n        });\n\n        const width = props.width - props.left - props.right\n        const height = props.height - props.top - props.bottom\n\n        const svg = d3\n            .select('.seaSurfaceWaterSpeed')\n            .append('svg')\n            .attr('width', width + props.left + props.right)\n            .attr('height', height + props.top + props.bottom)\n            .append('g')\n            .attr('transform', `translate(${props.left},${props.top})`)\n\n        const x = d3\n            .scaleTime()\n            .domain(\n                d3.extent(data, (key) => {\n                    return key.datetime\n                }) as [Date, Date]\n            )\n            .range([0, width])\n\n        svg.append('g').attr('transform', `translate(0, ${height})`).call(d3.axisBottom(x))\n\n        const y = d3\n            .scaleLinear()\n            .domain([\n                0,\n                d3.max(data, (key) => {\n                    return +key.surface_sea_water_speed\n                }),\n            ] as number[])\n            .range([height, 0])\n\n        svg.append('g').call(d3.axisLeft(y))\n\n        svg\n            .append('path')\n            .datum(data)\n            .attr('fill', \"none\")\n            .attr('stroke', \"black\")\n            .attr('stroke-width', 1.6)\n            .attr(\n                'd',\n                // @ts-ignore\n                d3.line()\n                    .x((d) => {\n                        return x(((d as unknown) as { datetime: number }).datetime)\n                    })\n                    .y((d) => {\n                        return y(((d as unknown) as { surface_sea_water_speed: number }).surface_sea_water_speed)\n                    })\n            )\n    }\n    return <div className=\"seaSurfaceWaterSpeed\" />\n};\n\nSeaSurfaceWaterSpeed.propTypes = {\n};\n\nexport default SeaSurfaceWaterSpeed;\n\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport SeaSurfaceWave from \"./components/SeaSurfaceWave\";\nimport SeaSurfaceWaterSpeed from \"./components/SeaSurfaceWaterSpeed\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SeaSurfaceWave width={1500} left={50} right={50} height={800} top={50} bottom={50} fill=\"tomato\" />\n      <SeaSurfaceWaterSpeed width={1500} left={50} right={50} height={800} top={50} bottom={50} fill=\"tomato\" />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}