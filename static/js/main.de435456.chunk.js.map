{"version":3,"sources":["components/SeaSurfaceWaveHeight.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SeaSurfaceWaveHeight","props","isNumber","value","isNaN","Number","toString","buildJSON","a","rtnArray","axios","get","response","Object","keys","data","forEach","val","datetime","body","record","sea_surface_wave_from_direction_at_variance_spectral_density_maximum","surface_sea_water_speed","sea_surface_wave_maximum_height","push","sort","recordA","recordB","Date","useEffect","draw","eraseDrawing","d3","selectChild","remove","jsonArray","alasql","promise","then","result","fn","dateStr","tmpArray","maximumData","significantData","arrgregateData","map","row","sea_surface_wave_significant_height","maxRecord","name","significantRecord","arrgregateRecord","margin","width","left","right","height","top","bottom","colors","svg","append","attr","xScale","domain","key","range","call","yScale","flat","console","log","g","select","clone","text","waterLevel","selectAll","enter","pathLine","x","d","y","i","length","style","join","className","App","fill","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.de435456.chunk.js","sourcesContent":["import React, { FC, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport \"./SeaSurfaceWaveHeight.scss\";\nimport axios from 'axios';\nimport alasql from 'alasql';\n\ninterface ISeaSurfaceWaveHeightProps {\n    width: number,\n    left: number,\n    right: number,\n    height: number,\n    top: number,\n    bottom: number,\n    fill: string\n}\ninterface JSONBody {\n    sea_surface_wave_from_direction_at_variance_spectral_density_maximum?: number,\n    surface_sea_water_speed?: number,\n    sea_surface_wave_maximum_height?: number,\n\n}\n\ninterface ISeaSurfaceWaterSpeed {\n    datetime: string,\n    sea_surface_wave_from_direction_at_variance_spectral_density_maximum: number,\n    surface_sea_water_speed: number,\n    sea_surface_wave_maximum_height: number,\n}\n\ninterface IIntermediaData {\n    datetime: string,\n    sea_surface_wave_from_direction_at_variance_spectral_density_maximum: number,\n    surface_sea_water_speed: number,\n    sea_surface_wave_maximum_height: number,\n    sea_surface_wave_significant_height: number,\n    air_temperature_at_2m_above_ground_level: number,\n    wind_from_direction_at_10m_above_ground_level: number,\n    wind_speed_at_10m_above_ground_level: number\n}\n\ninterface IAggregatedData {\n    datetime: Date,\n    sea_surface_wave_maximum_height: number,\n    sea_surface_wave_significant_height: number\n}\n\ninterface IDataModel {\n    datetime: Date,\n    name: string,\n    value: number\n}\n\nconst SeaSurfaceWaveHeight: FC<ISeaSurfaceWaveHeightProps> = (props: ISeaSurfaceWaveHeightProps) => {\n\n\n    const def_val = 0;\n\n    const isNumber = (value: string | number): boolean => {\n        return ((value != null) &&\n            (value !== '') &&\n            !isNaN(Number(value.toString())));\n    };\n\n    const buildJSON = async () => {\n        const rtnArray: ISeaSurfaceWaterSpeed[] = [];\n\n        const response = await axios.get(\"./data.json\");\n\n        Object.keys(response.data).forEach(val => {\n            const datetime: string = val;\n            const body: JSONBody = response.data[val];\n            const sea_surface_wave_from_direction_at_variance_spectral_density_maximum = body.sea_surface_wave_from_direction_at_variance_spectral_density_maximum || def_val;\n            const surface_sea_water_speed = body.surface_sea_water_speed || def_val;\n            const sea_surface_wave_maximum_height = body.sea_surface_wave_maximum_height || def_val;\n            const record = { datetime: datetime || \"null\", sea_surface_wave_from_direction_at_variance_spectral_density_maximum: sea_surface_wave_from_direction_at_variance_spectral_density_maximum, surface_sea_water_speed: surface_sea_water_speed, sea_surface_wave_maximum_height: sea_surface_wave_maximum_height };\n\n            rtnArray.push(record);\n\n        });\n        rtnArray.sort((recordA, recordB) => +new Date(recordA.datetime) - +new Date(recordB.datetime));\n\n        return rtnArray;\n    }\n\n    useEffect(() => {\n        draw();\n        return function cleanup() {\n            eraseDrawing();\n        };\n\n    })\n\n    const eraseDrawing = () => {\n        d3\n            .select('.SeaSurfaceWaveHeight')\n            .selectChild('svg')\n            .remove()\n    }\n\n\n    const draw = async () => {\n\n\n        const jsonArray = await buildJSON();\n\n        alasql.promise([\n            \"select * from csv('./data.csv')\",\n            [\"select * from ?\", [jsonArray]]\n        ])\n            .then(result => {\n\n                alasql.fn.datetime = (dateStr) => {\n                    return d3.timeParse(\"%Y-%m-%dT%H:%M:%SZ\")(dateStr)\n                };\n\n                const tmpArray = alasql('SELECT * from ? myCSVArray OUTER JOIN ? myJSONArray USING datetime ORDER BY datetime ASC', result);\n                const maximumData: IDataModel[] = [];\n                const significantData: IDataModel[] = [];\n\n                const arrgregateData: IAggregatedData[] = [];\n\n                tmpArray.map((row: IIntermediaData) => {\n                    const datetime: Date = d3.timeParse(\"%Y-%m-%dT%H:%M:%SZ\")(row.datetime) || new Date(0);\n                    let sea_surface_wave_maximum_height = def_val;\n                    let sea_surface_wave_significant_height = def_val;\n\n                    if (isNumber(row.sea_surface_wave_maximum_height)) {\n                        sea_surface_wave_maximum_height = Number(row.sea_surface_wave_maximum_height)\n\n                    } else {\n                        sea_surface_wave_significant_height = def_val\n                    }\n\n                    if (isNumber(row.sea_surface_wave_significant_height)) {\n                        sea_surface_wave_significant_height = Number(row.sea_surface_wave_significant_height)\n\n                    } else {\n                        sea_surface_wave_significant_height = def_val\n                    }\n\n                    const maxRecord = { datetime: datetime, value: sea_surface_wave_maximum_height, name: \"MAX\" };\n                    const significantRecord = { datetime: datetime, value: sea_surface_wave_significant_height, name: \"SIGNIFICANT\" };\n                    const arrgregateRecord = { datetime: datetime, sea_surface_wave_significant_height: sea_surface_wave_significant_height, sea_surface_wave_maximum_height: sea_surface_wave_maximum_height };\n\n                    maximumData.push(maxRecord);\n                    significantData.push(significantRecord);\n                    arrgregateData.push(arrgregateRecord);\n\n                })\n\n                const data: IDataModel[][] = [maximumData, significantData];\n                const margin = ({ top: 0, right: 0, bottom: 0, left: 0 })\n                const width = props.width - props.left - props.right\n                const height = props.height - props.top - props.bottom\n                const colors = ['#008080', '#5C9DE6', '#3C3C3C', '#1F1F1F', '#C0C0C0', '#A0A0A0', '#3A3A3A']\n\n\n                const svg = d3\n                    .select('.SeaSurfaceWaveHeight')\n                    .append('svg')\n                    .attr('width', width + props.left + props.right)\n                    .attr('height', height + props.top + props.bottom)\n                    .append('g')\n                    .attr('transform', `translate(${props.left},${props.top})`)\n\n                const xScale = d3\n                    .scaleTime()\n                    .domain(\n                        d3.extent(data[0], (key) => {\n                            return key.datetime\n                        }) as [Date, Date]\n                    )\n                    .range([0, width])\n\n\n\n                svg.append('g').attr('transform', `translate(0, ${height})`).call(d3.axisBottom(xScale))\n\n                const yScale = d3\n                    .scaleLinear()\n                    .domain([\n                        0,\n                        d3.max(data.flat(), (key) => {\n                            console.log(key.value)\n                            return +key.value + 1\n                        }),\n                    ] as number[])\n                    .range([height, 0])\n\n                svg.append('g').attr(\"transform\", `translate(${margin.left},0)`)\n                    .call(d3.axisLeft(yScale))\n                    .call(g => g.select(\".domain\").remove())\n                    .call(g => g.select(\".tick:last-of-type text\").clone()\n                        .attr(\"x\", 3)\n                        .attr(\"text-anchor\", \"start\")\n                        .attr(\"font-weight\", \"bold\")\n                        .text('Water Level (m)'))\n\n\n                const waterLevel = svg.selectAll('.waterLevel')\n                    .data(data)\n                    .enter()\n                    .append('g')\n                    .attr('class', 'waterLevel')\n                    ;\n\n\n                const pathLine = d3.line()\n                    .x((d) => {\n                        return xScale(((d as unknown) as { datetime: number }).datetime)\n                    })\n                    .y((d) => {\n                        return yScale(((d as unknown) as { value: number }).value)\n                    })\n\n                const path = waterLevel.append('path')\n                    .attr('class', 'line')\n                    .attr('fill', \"none\")\n                    .attr('stroke', (d: IDataModel[], i: number) => {\n                        return colors[i % colors.length];\n                    })\n                    .attr('stroke-width', 1.6)\n                    .attr(\n                        'd',\n                        // @ts-ignore\n                        pathLine\n\n                    );\n\n\n                svg.append(\"text\")\n                    .attr(\"x\", (width / 2))\n                    .attr(\"y\", 0 - (margin.top / 2))\n                    .attr(\"text-anchor\", \"middle\")\n                    .style(\"font-size\", \"16px\")\n                    .style(\"text-decoration\", \"underline\")\n                    .text(\"Sea Surface Wave Maximum Height and Significant Height vs Date Graph\");\n\n                svg\n                    .selectAll('text.label')\n                    .data(data)\n                    .join('text')\n                    .attr('class', 'label')\n                    .attr('x', width - margin.right - 50)\n                    .attr(\n                        'y',\n                        (d: IDataModel[], i: number) => {\n                            return yScale(d[d.length - 1].value) + (i * 50) - 100\n                        }\n                    )\n                    .attr('dy', '0.35em')\n                    .style('fill', (d: IDataModel[], i: number) => {\n                        return colors[i % colors.length];\n                    })\n                    .style('font-family', 'sans-serif')\n                    .style('font-size', 12)\n                    .text(d => d[0].name);\n\n            })\n    }\n    return <div className=\"SeaSurfaceWaveHeight\" />\n};\n\nSeaSurfaceWaveHeight.propTypes = {\n};\n\nexport default SeaSurfaceWaveHeight;\n\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport SeaSurfaceWaveHeight from \"./components/SeaSurfaceWaveHeight\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SeaSurfaceWaveHeight width={1500} left={50} right={50} height={800} top={50} bottom={50} fill=\"tomato\" />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}